// 类型检查机制就是：
// typescript编译器在做类型检查时，所秉承的一些原则，以及表现出的一些行为。
// 作用：辅助开发，提升开发效率。

// 类型检查机制包括以下三个方面：
// 1. 类型推断
// 2. 类型兼容性
// 3. 类型保护

// =========类型推断===========

//不需要指定变量的类型（函数的返回值类型），typescript可以根据某些规则自动的为其推断出一个类型。

// 1.1 基础类型推断
// 1.2 最佳通用类型推断
// 1.3 上下文类型推断

// 1.1 基础类型推断
let a; // 自动推断为 any 类型
let b = 1; // 自动推断为 number 类型
let c = [1]; // 自动推断为 number 类型数组

let d = (x = 1) => x + 1; // 默认参数 x 被推断为 number 类型，返回值 d 被推断为 number 类型

// 类型断言
// let foo = {};
// foo.bar = 1; // 编辑器会报错，因为 foo 对象中没有 bar 属性

interface Foo {
    bar: number
}
let foo = {} as Foo;
foo.bar = 1;

// 但是上面的方法不能乱用，比如将 foo.bar 赋值语句去掉，编辑器也不会报错，
// 那么现在 foo 对象就并没有严格按照接口的约定给它赋值一个 bar 属性，有时就会出现遗漏的情况

// 解决方法就是，最好在声明时就指定其接口类型
let foo1: Foo = {
    bar: 1
}

// 类型断言可以增加代码的灵活性，在改造一些旧代码时比较有效。